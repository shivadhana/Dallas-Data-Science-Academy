{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"S9 - Employee Data Business Case","provenance":[],"authorship_tag":"ABX9TyP+ECqz5Ix8VomV4Vb/EPsb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"91WNn7mzhIWt","executionInfo":{"status":"ok","timestamp":1655395275893,"user_tz":300,"elapsed":1037,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"outputs":[],"source":["# Code snippet 1\n","# NumPy for numerical computing\n","import numpy as np\n","\n","# Pandas for DataFrames\n","import pandas as pd"]},{"cell_type":"code","source":["# Code snippet 2\n","# This dataset contain both features and labels\n","url = 'https://raw.githubusercontent.com/nvamsimohan/DallasDSA/main/employee_data.csv'\n","df = pd.read_csv(url)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"AV5S7CEnhXHu","executionInfo":{"status":"ok","timestamp":1655395276435,"user_tz":300,"elapsed":13,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}},"outputId":"1058315e-8183-4c3a-fd27-61500a456e28"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       avg_monthly_hrs   department  filed_complaint  last_evaluation  \\\n","0                  221  engineering              NaN         0.932868   \n","1                  232      support              NaN              NaN   \n","2                  184        sales              NaN         0.788830   \n","3                  206        sales              NaN         0.575688   \n","4                  249        sales              NaN         0.845217   \n","...                ...          ...              ...              ...   \n","14244              178           IT              NaN         0.735865   \n","14245              257        sales              NaN         0.638604   \n","14246              232      finance              1.0         0.847623   \n","14247              130           IT              NaN         0.757184   \n","14248              159          NaN              NaN         0.578742   \n","\n","       n_projects  recently_promoted  salary  satisfaction    status  tenure  \n","0               4                NaN     low      0.829896      Left     5.0  \n","1               3                NaN     low      0.834544  Employed     2.0  \n","2               3                NaN  medium      0.834988  Employed     3.0  \n","3               4                NaN     low      0.424764  Employed     2.0  \n","4               3                NaN     low      0.779043  Employed     3.0  \n","...           ...                ...     ...           ...       ...     ...  \n","14244           5                NaN     low      0.263282  Employed     5.0  \n","14245           3                NaN     low      0.868209  Employed     2.0  \n","14246           5                NaN  medium      0.898917      Left     5.0  \n","14247           4                NaN  medium      0.641304  Employed     3.0  \n","14248           3                NaN  medium      0.808850  Employed     3.0  \n","\n","[14249 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-9a5f8bc6-3736-4827-9ae0-d7b0f70ee141\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>avg_monthly_hrs</th>\n","      <th>department</th>\n","      <th>filed_complaint</th>\n","      <th>last_evaluation</th>\n","      <th>n_projects</th>\n","      <th>recently_promoted</th>\n","      <th>salary</th>\n","      <th>satisfaction</th>\n","      <th>status</th>\n","      <th>tenure</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>221</td>\n","      <td>engineering</td>\n","      <td>NaN</td>\n","      <td>0.932868</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.829896</td>\n","      <td>Left</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>232</td>\n","      <td>support</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.834544</td>\n","      <td>Employed</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>184</td>\n","      <td>sales</td>\n","      <td>NaN</td>\n","      <td>0.788830</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>medium</td>\n","      <td>0.834988</td>\n","      <td>Employed</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>206</td>\n","      <td>sales</td>\n","      <td>NaN</td>\n","      <td>0.575688</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.424764</td>\n","      <td>Employed</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>249</td>\n","      <td>sales</td>\n","      <td>NaN</td>\n","      <td>0.845217</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.779043</td>\n","      <td>Employed</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14244</th>\n","      <td>178</td>\n","      <td>IT</td>\n","      <td>NaN</td>\n","      <td>0.735865</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.263282</td>\n","      <td>Employed</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>14245</th>\n","      <td>257</td>\n","      <td>sales</td>\n","      <td>NaN</td>\n","      <td>0.638604</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>low</td>\n","      <td>0.868209</td>\n","      <td>Employed</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>14246</th>\n","      <td>232</td>\n","      <td>finance</td>\n","      <td>1.0</td>\n","      <td>0.847623</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>medium</td>\n","      <td>0.898917</td>\n","      <td>Left</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>14247</th>\n","      <td>130</td>\n","      <td>IT</td>\n","      <td>NaN</td>\n","      <td>0.757184</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>medium</td>\n","      <td>0.641304</td>\n","      <td>Employed</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>14248</th>\n","      <td>159</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.578742</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>medium</td>\n","      <td>0.808850</td>\n","      <td>Employed</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14249 rows Ã— 10 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a5f8bc6-3736-4827-9ae0-d7b0f70ee141')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9a5f8bc6-3736-4827-9ae0-d7b0f70ee141 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9a5f8bc6-3736-4827-9ae0-d7b0f70ee141');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# Code snippet 3\n","# Checking the data types\n","df.dtypes"],"metadata":{"id":"JL9QWyZGhZoQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 4\n","# Checking the null values list and counts\n","df.isnull().sum()"],"metadata":{"id":"PLpg_nXGhcPo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 5\n","# Replacing null values with zeroes as appropriate\n","df['filed_complaint'] = df['filed_complaint'].fillna(0)\n","df['recently_promoted'] = df['recently_promoted'].fillna(0)"],"metadata":{"id":"FczisdVvhd5b","executionInfo":{"status":"ok","timestamp":1655395279543,"user_tz":300,"elapsed":3,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Code snippet 10\n","# Checking the null values list after cleaning\n","df.isnull().sum()"],"metadata":{"id":"so_Pznl1hjZQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 11\n","# Exploratory Data Analysis using latest AI based AutoEDA Package - sweetviz\n","!pip install sweetviz"],"metadata":{"id":"S4RU8wr8hkdQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 12\n","# Importing the package for use\n","!pip install MarkupSafe==2.0.1\n","import sweetviz as sv\n","\n","# Generate the EDA report\n","Employee_EDA_report = sv.analyze(df)\n","\n","# Convert the report to HTML \n","Employee_EDA_report.show_html() # Default arguments will generate to \"SWEETVIZ_REPORT.html\"\n","\n","# Downloading the EDA report to local machine\n","from google.colab import files\n","files.download(\"SWEETVIZ_REPORT.html\")"],"metadata":{"id":"H4GSPz6vhmFh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 13\n","# Method 1 - Doing Auto ML with PyCaret\n","!pip install pycaret --upgrade"],"metadata":{"id":"6hJtmlMohr8X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 13a (to run after the restart of the run time)\n","import numpy as np\n","import pandas as pd\n","df = pd.read_csv(url)\n","df\n","\n","# Replacing null values with zeroes as appropriate\n","df['filed_complaint'] = df['filed_complaint'].fillna(0)\n","df['recently_promoted'] = df['recently_promoted'].fillna(0)"],"metadata":{"id":"Bc30alCnhzBR","executionInfo":{"status":"ok","timestamp":1655395426500,"user_tz":300,"elapsed":287,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Code snippet 14.1 - Setting numerical, categorical features\n","num_cols=['avg_monthly_hrs','last_evaluation','n_projects','satisfaction','tenure']\n","cat_cols=['department','salary']"],"metadata":{"id":"ZeiDjJzah0a9","executionInfo":{"status":"ok","timestamp":1655395428896,"user_tz":300,"elapsed":360,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Code snippet 14\n","#To import all Classification related Pycaret libraries\n","!pip jinja2=2.10=py36_0\n","from pycaret.classification import *"],"metadata":{"id":"9Zc2Hkhyh4hV","colab":{"base_uri":"https://localhost:8080/","height":494},"executionInfo":{"status":"error","timestamp":1655397387092,"user_tz":300,"elapsed":1059,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}},"outputId":"83c3010d-cfff-4537-d7d2-d084dcf642e3"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["ERROR: unknown command \"jinja2=2.10=py36_0\"\n"]},{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-4fde3e025797>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#To import all Classification related Pycaret libraries\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pip jinja2=2.10=py36_0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclassification\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/classification.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minternal\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtabular\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloggers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_logger\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseLogger\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparallel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mParallelBackend\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/internal/tabular.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mget_estimator_from_meta_estimator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m )\n\u001b[0;32m---> 16\u001b[0;31m from pycaret.internal.pipeline import (\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0madd_estimator_to_pipeline\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mget_pipeline_estimator_label\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/internal/pipeline.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# This pipeline is only to be used internally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minternal\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_all_object_vars_and_properties\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_fit_var\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mimblearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_print_elapsed_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/internal/utils.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpycaret\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontainers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModelContainer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstyle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mipywidgets\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mipw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHTML\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclear_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mupdate_display\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/formats/style.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msave_to_buffer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m \u001b[0mjinja2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"jinja2\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextra\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"DataFrame.style requires jinja2.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m from pandas.io.formats.style_render import (\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/compat/_optional.py\u001b[0m in \u001b[0;36mimport_optional_dependency\u001b[0;34m(name, extra, errors, min_version)\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: Missing optional dependency 'Jinja2'. DataFrame.style requires jinja2. Use pip or conda to install Jinja2.","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["# Code snippet 15\n","# Setting up the classification ML experiment\n","classification_model_setup = setup(df,  target = 'status', categorical_features= cat_cols, numeric_features=num_cols)"],"metadata":{"id":"t7mmm7qRh7S9","colab":{"base_uri":"https://localhost:8080/","height":198},"outputId":"31389d68-ed07-413b-8c56-1d88e708ffaa","executionInfo":{"status":"error","timestamp":1655395319492,"user_tz":300,"elapsed":409,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":13,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-0f7dd60ce143>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Code snippet 15\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Setting up the classification ML experiment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mclassification_model_setup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msetup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'status'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategorical_features\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mcat_cols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_cols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'setup' is not defined"]}]},{"cell_type":"code","source":["# Code snippet 16\n","# Running the multiple algorithms\n","compare_models(budget_time=1)"],"metadata":{"id":"GAXBtekLh-py"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 17\n","# Creating the model with the best algorithm based on the above results\n","model = create_model('rf')"],"metadata":{"id":"tIdbzToyiBi9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 17.1\n","# Checking the confusion matrix etc\n","evaluate_model(model)"],"metadata":{"id":"FgdmlBfkiDC5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 18\n","# Loading the Client dataset for which predictions to be made\n","url1 = 'https://raw.githubusercontent.com/nvamsimohan/DallasDSA/main/Employee%20Attrition%20Data%20-%20Client%20request.csv'\n","pred_data = pd.read_csv(url1)"],"metadata":{"id":"tcNN_u3diE7f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 18.1 - checking the data size of the client data set\n","pred_data.shape"],"metadata":{"id":"WlQ6xEQBiJMS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 19\n","# Predicting the values using the best model\n","predictions = predict_model(model, data = pred_data)"],"metadata":{"id":"0QgdFBGwiK1g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 20\n","# Converting predictions dataframe to csv\n","predictions.to_csv(\"Employee Status Predictions.csv\")"],"metadata":{"id":"1jqtwrxZiNew"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 21\n","# Method 2 - Installing the H2O AI Package for Advanced ML and Deep Learning packages\n","!pip install h2o"],"metadata":{"id":"i1wdvQ0qiSPd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 22\n","# Importing into current Working Session\n","import h2o\n","from h2o.automl import H2OAutoML"],"metadata":{"id":"g4bgIRjciUfV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 23\n","# Initializing the H2O Server\n","h2o.init()"],"metadata":{"id":"oTxoPedRiaLA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 24\n","# Converting Pandas dataframe to H2O dataframe\n","import pandas as pd\n","df1 = pd.read_csv(url)\n","hf = h2o.H2OFrame(df1)\n","hf"],"metadata":{"id":"5M2vPxGhiay1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 25\n","# Splitting the data to train and test\n","splits = hf.split_frame(ratios = [0.8])\n","# Assigning first split to train variable\n","train = splits[0]\n","# Assigning first split to test variable\n","test = splits[1]"],"metadata":{"id":"01LLsFthicom"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 26\n","# Invoking the Auto advanced ML and Deep learning algorithms restricting run time to 60 seconds\n","aml = H2OAutoML(max_runtime_secs = 30)\n","# Training using train data and testing with test data\n","aml.train(y = \"status\", training_frame = train)"],"metadata":{"id":"FLyr3u0vifJn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 27\n","# Displaying the best algorithm scores\n","aml.leaderboard.head(20)"],"metadata":{"id":"bKbQYlP-igmT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 28\n","# Getting the prediction metrics\n","perf = aml.leader.model_performance(test)\n","# Displaying the performance metrics\n","perf"],"metadata":{"id":"hnQx7ihZihyw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 29\n","#Predicting the values using the best algorithms \n","client_data = pd.read_csv(url1)\n","hf_client = h2o.H2OFrame(client_data)\n","hf_client "],"metadata":{"id":"nM92tGsQiiT2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 30\n","pred = aml.predict(hf_client)\n","# Displaying sample prediction results\n","pred.head()"],"metadata":{"id":"QXkshxTAijhs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 31\n","# Converting H2O Predictions data to a Pandas dataframe\n","pred_df = pred.as_data_frame()"],"metadata":{"id":"GjgGeINzilEy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 32\n","# Appending predictions to the client data\n","client_data['Prediction'] = pred_df['predict']"],"metadata":{"id":"IRHPHHDripAX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 33\n","# Converting the dataframe to a CSV file\n","client_data.to_csv('Employee Data Predictions.csv')"],"metadata":{"id":"jtc-dEleisEt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 34\n","# Downloading the Predictions data file to local machine\n","from google.colab import files\n","files.download(\"Employee Data Predictions.csv\")"],"metadata":{"id":"HQ862o6Lit-U"},"execution_count":null,"outputs":[]}]}