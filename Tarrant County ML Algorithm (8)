{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"S8 - Tarrant County ML Algorithm","provenance":[],"authorship_tag":"ABX9TyMZ7waoPWffm+ZKzyZYyond"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"8db6214312b54270b4be342051ff96a2":{"model_module":"@jupyter-widgets/controls","model_name":"IntProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"Processing: ","description_tooltip":null,"layout":"IPY_MODEL_06e000bb9f5e4df18c0dff60dddb5326","max":84,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0dfc961469ba48e3a9876cfd6565da91","value":14}},"06e000bb9f5e4df18c0dff60dddb5326":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0dfc961469ba48e3a9876cfd6565da91":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9c7987a29d604d86bca49b3f9bfe7c55":{"model_module":"@jupyter-widgets/controls","model_name":"IntProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"IntProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"Processing: ","description_tooltip":null,"layout":"IPY_MODEL_701c1d2f4752433e8f12a9a66f8ec5d3","max":4,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e0d7a10c7b034328b9d03ea7c32df8f2","value":4}},"701c1d2f4752433e8f12a9a66f8ec5d3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e0d7a10c7b034328b9d03ea7c32df8f2":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"obcOF62hg9lX"},"outputs":[],"source":["# Code snippet 1 - Loading the latest version of Pycaret AI package\n","!pip install pycaret[full]"]},{"cell_type":"code","source":["# Code snippet 2 - Loading dataframe processing packages\n","import numpy as np\n","import pandas as pd"],"metadata":{"id":"pF4cszN5hR6R","executionInfo":{"status":"ok","timestamp":1655230857140,"user_tz":300,"elapsed":716,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Code snippet 3 - Assigning data url to a variable \n","url = 'https://raw.githubusercontent.com/nvamsimohan/DallasDSA/main/Tarrant%20County%20Income%20Dataset.csv'\n","\n","# Obtaining data from url and assigning to a dataframe\n","df = pd.read_csv(url)\n","\n","# Displaying the data columns\n","df.columns"],"metadata":{"id":"9g8s0jIshTtO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 4 - Assigning all noise/redundant features to a variable after Qualitative and Quantitative analysis\n","ignored_cols = ['Profile Id']"],"metadata":{"id":"7XMBTtzohVt6","executionInfo":{"status":"ok","timestamp":1655230862580,"user_tz":300,"elapsed":98,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Code snippet 5 - Listing all categorical features to a variable\n","cat_cols = ['Workclass', 'Education', 'Marital Status', 'Occupation', 'Relationship', 'Gender',\n","       'Native Country']"],"metadata":{"id":"jlGvfis4hX-7","executionInfo":{"status":"ok","timestamp":1655230868842,"user_tz":300,"elapsed":94,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Code snippet 6 - Listing all numerical features to a variable\n","num_cols = ['Age', 'Capital Gain', 'Capital Loss', 'Hours per Week',]"],"metadata":{"id":"X3GEnXxqhZTs","executionInfo":{"status":"ok","timestamp":1655230873085,"user_tz":300,"elapsed":106,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Code snippet 7 - Importing all Classification Machine Learning algorithms\n","from pycaret.classification import *"],"metadata":{"id":"SUw3aiajha8v","executionInfo":{"status":"ok","timestamp":1655231109025,"user_tz":300,"elapsed":103,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Code snippet 8 - Setting up the Machine Learning model\n","s = setup(df, target = 'Income GT 50k', categorical_features= cat_cols, numeric_features=num_cols,\n","          ignore_features = ignored_cols, train_size = 0.7)          "],"metadata":{"id":"gnrYtEKkhcFb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 9 - Invoking all ML algorithms to compare the performance\n","compare_models(budget_time= 1)"],"metadata":{"id":"8ACsfsHYhdcB","colab":{"base_uri":"https://localhost:8080/","height":196,"referenced_widgets":["8db6214312b54270b4be342051ff96a2","06e000bb9f5e4df18c0dff60dddb5326","0dfc961469ba48e3a9876cfd6565da91"]},"executionInfo":{"status":"ok","timestamp":1655231337412,"user_tz":300,"elapsed":89147,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}},"outputId":"ee333b69-f5a1-4787-be25-bfbf71f477a2"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["                      Model  Accuracy     AUC  Recall   Prec.      F1   Kappa  \\\n","lr      Logistic Regression    0.8500  0.9019  0.5925  0.7306  0.6542  0.5597   \n","knn  K Neighbors Classifier    0.8428  0.8665  0.6242  0.6901  0.6553  0.5538   \n","\n","        MCC  TT (Sec)  \n","lr   0.5648     4.435  \n","knn  0.5551     3.776  "],"text/html":["\n","  <div id=\"df-c8aaa4ad-fa07-453c-b03c-d50028e5af34\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>AUC</th>\n","      <th>Recall</th>\n","      <th>Prec.</th>\n","      <th>F1</th>\n","      <th>Kappa</th>\n","      <th>MCC</th>\n","      <th>TT (Sec)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>lr</th>\n","      <td>Logistic Regression</td>\n","      <td>0.8500</td>\n","      <td>0.9019</td>\n","      <td>0.5925</td>\n","      <td>0.7306</td>\n","      <td>0.6542</td>\n","      <td>0.5597</td>\n","      <td>0.5648</td>\n","      <td>4.435</td>\n","    </tr>\n","    <tr>\n","      <th>knn</th>\n","      <td>K Neighbors Classifier</td>\n","      <td>0.8428</td>\n","      <td>0.8665</td>\n","      <td>0.6242</td>\n","      <td>0.6901</td>\n","      <td>0.6553</td>\n","      <td>0.5538</td>\n","      <td>0.5551</td>\n","      <td>3.776</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8aaa4ad-fa07-453c-b03c-d50028e5af34')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c8aaa4ad-fa07-453c-b03c-d50028e5af34 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c8aaa4ad-fa07-453c-b03c-d50028e5af34');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=1934, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Code snippet 10 - Setting up predictive model with the best ML algorithm\n","model = create_model('lr')"],"metadata":{"id":"k1fleflPheha","colab":{"base_uri":"https://localhost:8080/","height":452,"referenced_widgets":["9c7987a29d604d86bca49b3f9bfe7c55","701c1d2f4752433e8f12a9a66f8ec5d3","e0d7a10c7b034328b9d03ea7c32df8f2"]},"executionInfo":{"status":"ok","timestamp":1655231394168,"user_tz":300,"elapsed":50934,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}},"outputId":"c3354d70-79d1-4d3e-9ec1-fa43954414a3"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["      Accuracy     AUC  Recall   Prec.      F1   Kappa     MCC\n","Fold                                                          \n","0       0.8539  0.9001  0.5971  0.7426  0.6619  0.5702  0.5757\n","1       0.8526  0.9118  0.6081  0.7313  0.6640  0.5706  0.5746\n","2       0.8499  0.8958  0.5788  0.7383  0.6489  0.5552  0.5619\n","3       0.8561  0.8994  0.6044  0.7466  0.6680  0.5774  0.5827\n","4       0.8460  0.8945  0.5714  0.7273  0.6400  0.5438  0.5502\n","5       0.8473  0.8969  0.6081  0.7124  0.6561  0.5588  0.5617\n","6       0.8464  0.9032  0.5678  0.7311  0.6392  0.5436  0.5506\n","7       0.8464  0.9037  0.5788  0.7248  0.6436  0.5473  0.5529\n","8       0.8508  0.8990  0.6007  0.7289  0.6586  0.5643  0.5686\n","9       0.8504  0.9147  0.6099  0.7223  0.6614  0.5662  0.5696\n","Mean    0.8500  0.9019  0.5925  0.7306  0.6542  0.5597  0.5648\n","Std     0.0033  0.0063  0.0157  0.0095  0.0099  0.0114  0.0107"],"text/html":["\n","  <div id=\"df-da6d1543-0158-44f0-b771-55ce51cdd4c5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Accuracy</th>\n","      <th>AUC</th>\n","      <th>Recall</th>\n","      <th>Prec.</th>\n","      <th>F1</th>\n","      <th>Kappa</th>\n","      <th>MCC</th>\n","    </tr>\n","    <tr>\n","      <th>Fold</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.8539</td>\n","      <td>0.9001</td>\n","      <td>0.5971</td>\n","      <td>0.7426</td>\n","      <td>0.6619</td>\n","      <td>0.5702</td>\n","      <td>0.5757</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.8526</td>\n","      <td>0.9118</td>\n","      <td>0.6081</td>\n","      <td>0.7313</td>\n","      <td>0.6640</td>\n","      <td>0.5706</td>\n","      <td>0.5746</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.8499</td>\n","      <td>0.8958</td>\n","      <td>0.5788</td>\n","      <td>0.7383</td>\n","      <td>0.6489</td>\n","      <td>0.5552</td>\n","      <td>0.5619</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.8561</td>\n","      <td>0.8994</td>\n","      <td>0.6044</td>\n","      <td>0.7466</td>\n","      <td>0.6680</td>\n","      <td>0.5774</td>\n","      <td>0.5827</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.8460</td>\n","      <td>0.8945</td>\n","      <td>0.5714</td>\n","      <td>0.7273</td>\n","      <td>0.6400</td>\n","      <td>0.5438</td>\n","      <td>0.5502</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.8473</td>\n","      <td>0.8969</td>\n","      <td>0.6081</td>\n","      <td>0.7124</td>\n","      <td>0.6561</td>\n","      <td>0.5588</td>\n","      <td>0.5617</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.8464</td>\n","      <td>0.9032</td>\n","      <td>0.5678</td>\n","      <td>0.7311</td>\n","      <td>0.6392</td>\n","      <td>0.5436</td>\n","      <td>0.5506</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.8464</td>\n","      <td>0.9037</td>\n","      <td>0.5788</td>\n","      <td>0.7248</td>\n","      <td>0.6436</td>\n","      <td>0.5473</td>\n","      <td>0.5529</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.8508</td>\n","      <td>0.8990</td>\n","      <td>0.6007</td>\n","      <td>0.7289</td>\n","      <td>0.6586</td>\n","      <td>0.5643</td>\n","      <td>0.5686</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.8504</td>\n","      <td>0.9147</td>\n","      <td>0.6099</td>\n","      <td>0.7223</td>\n","      <td>0.6614</td>\n","      <td>0.5662</td>\n","      <td>0.5696</td>\n","    </tr>\n","    <tr>\n","      <th>Mean</th>\n","      <td>0.8500</td>\n","      <td>0.9019</td>\n","      <td>0.5925</td>\n","      <td>0.7306</td>\n","      <td>0.6542</td>\n","      <td>0.5597</td>\n","      <td>0.5648</td>\n","    </tr>\n","    <tr>\n","      <th>Std</th>\n","      <td>0.0033</td>\n","      <td>0.0063</td>\n","      <td>0.0157</td>\n","      <td>0.0095</td>\n","      <td>0.0099</td>\n","      <td>0.0114</td>\n","      <td>0.0107</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da6d1543-0158-44f0-b771-55ce51cdd4c5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-da6d1543-0158-44f0-b771-55ce51cdd4c5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-da6d1543-0158-44f0-b771-55ce51cdd4c5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["# Code snippet 11 - Building an app to predict the standard scores\n","create_app(model)"],"metadata":{"id":"1uvKRSKAhfn-","colab":{"base_uri":"https://localhost:8080/","height":375},"executionInfo":{"status":"error","timestamp":1655234121445,"user_tz":300,"elapsed":5842,"user":{"displayName":"Shiva Dhanasekar","userId":"04233192556913628247"}},"outputId":"a2436fa3-345b-4642-cdb0-f421004568d3"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: MarkupSafe==2.0.1 in /usr/local/lib/python3.7/dist-packages (2.0.1)\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_326/2434071528.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Code snippet 11 - Building an app to predict the standard scores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pip install MarkupSafe==2.0.1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mcreate_app\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/classification.py\u001b[0m in \u001b[0;36mcreate_app\u001b[0;34m(estimator, app_kwargs)\u001b[0m\n\u001b[1;32m   3208\u001b[0m     \"\"\"\n\u001b[1;32m   3209\u001b[0m     return pycaret.internal.tabular.create_app(\n\u001b[0;32m-> 3210\u001b[0;31m         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapp_kwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mapp_kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3211\u001b[0m     )\n\u001b[1;32m   3212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pycaret/internal/tabular.py\u001b[0m in \u001b[0;36mcreate_app\u001b[0;34m(estimator, app_kwargs)\u001b[0m\n\u001b[1;32m  11040\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  11041\u001b[0m     return gr.Interface(\n\u001b[0;32m> 11042\u001b[0;31m         \u001b[0mfn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mall_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"text\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlive\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mapp_kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  11043\u001b[0m     ).launch()\n\u001b[1;32m  11044\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gradio/interface.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, fn, inputs, outputs, examples, cache_examples, examples_per_page, live, interpretation, num_shap, title, description, article, thumbnail, theme, css, allow_flagging, flagging_options, flagging_dir, flagging_callback, analytics_enabled, _repeat_outputs_per_model, **kwargs)\u001b[0m\n\u001b[1;32m    206\u001b[0m         ]\n\u001b[1;32m    207\u001b[0m         self.output_components = [\n\u001b[0;32m--> 208\u001b[0;31m             \u001b[0mget_component_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         ]\n\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gradio/interface.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    206\u001b[0m         ]\n\u001b[1;32m    207\u001b[0m         self.output_components = [\n\u001b[0;32m--> 208\u001b[0;31m             \u001b[0mget_component_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         ]\n\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gradio/components.py\u001b[0m in \u001b[0;36mget_component_instance\u001b[0;34m(comp, render)\u001b[0m\n\u001b[1;32m   3857\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mget_component_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomp\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mdict\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mComponent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mComponent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3858\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3859\u001b[0;31m         \u001b[0mcomponent_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomponent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3860\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3861\u001b[0m             \u001b[0mcomponent_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gradio/components.py\u001b[0m in \u001b[0;36mcomponent\u001b[0;34m(cls_name)\u001b[0m\n\u001b[1;32m   3851\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3852\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcomponent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mComponent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3853\u001b[0;31m     \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomponent_or_layout_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3854\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3855\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/gradio/utils.py\u001b[0m in \u001b[0;36mcomponent_or_layout_class\u001b[0;34m(cls_name)\u001b[0m\n\u001b[1;32m    296\u001b[0m     templates = [\n\u001b[1;32m    297\u001b[0m         \u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 298\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgradio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtemplates\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dict__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    299\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m     ]\n","\u001b[0;31mAttributeError\u001b[0m: module 'gradio' has no attribute 'templates'"]}]},{"cell_type":"code","source":["# Code snippet 12 - Obtaining the client data and saving it to a new pred_data dataframe\n","url1 = 'https://raw.githubusercontent.com/nvamsimohan/DallasDSA/main/Tarrant%20County%20Income%20-%20Client%20Dataset.csv'\n","pred_data = pd.read_csv(url1)\n","pred_data"],"metadata":{"id":"S0XQ7npGhgpw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 13 - Predicting the Standard Scores using the best ML model\n","predictions = predict_model(model, data = pred_data)"],"metadata":{"id":"uXxyIQo8hh6V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Code snippet 14 - Converting the predictions to a csv file to send it to client\n","predictions.to_csv(\"Tarrant county Income Predictions.csv\")"],"metadata":{"id":"N1bdEpTIhjI3"},"execution_count":null,"outputs":[]}]}